// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ earcut —Å –¥—ã—Ä–∫–∞–º–∏
const { Point, Polygon } = require('./dist/index.js');

function testHoles() {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ earcut —Å –¥—ã—Ä–∫–∞–º–∏...\n');

    // –°–æ–∑–¥–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç—É—Ä (–∫–≤–∞–¥—Ä–∞—Ç)
    const outerPoints = [
        new Point(0, 0),
        new Point(10, 0),
        new Point(10, 10),
        new Point(0, 10)
    ];

    // –°–æ–∑–¥–∞–µ–º –¥—ã—Ä–∫—É (–º–∞–ª–µ–Ω—å–∫–∏–π –∫–≤–∞–¥—Ä–∞—Ç –≤–Ω—É—Ç—Ä–∏)
    const holePoints = [
        new Point(3, 4),
        new Point(7, 3),
        new Point(7, 8),
        new Point(3, 7)
    ];
    const hole = new Polygon(holePoints);

    console.log('üìê –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω —Å –¥—ã—Ä–∫–æ–π —á–µ—Ä–µ–∑ Polygon.createWithHoles...');

    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞ —Å –¥—ã—Ä–∫–∞–º–∏
        const polygonWithHole = Polygon.createWithHoles(outerPoints, [hole]);

        console.log(`‚úÖ –ü–æ–ª–∏–≥–æ–Ω —Å –¥—ã—Ä–∫–æ–π —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!`);
        console.log(`   –í–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç—É—Ä: ${polygonWithHole.points.length} —Ç–æ—á–µ–∫`);
        console.log(`   –î—ã—Ä–æ–∫: ${polygonWithHole.holes.length}`);
        console.log(`   –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤: ${polygonWithHole.tpolygons.length}`);

        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞—Ö
        console.log('\nüî∫ –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏:');
        polygonWithHole.tpolygons.forEach((tpoly, i) => {
            const triangle = tpoly.mainTriangle;
            console.log(`   #${i}: (${triangle[0].x},${triangle[0].y}) - (${triangle[1].x},${triangle[1].y}) - (${triangle[2].x},${triangle[2].y})`);
        });

        console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª–∏–≥–æ–Ω–∞ —Å –¥—ã—Ä–∫–æ–π:', error.message);
        console.error(error.stack);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testHoles(); 