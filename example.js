// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ poly-math-2d
try {
    console.log('üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É poly-math-2d...');
    const { Point, Polygon, PolygonMap, pointInPolygon, segmentsIntersect } = require('./dist/index.js');
    console.log('‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n');

    // 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤
    console.log('üìê 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤');
    const triangle = new Polygon([
        new Point(0, 0),
        new Point(4, 0),
        new Point(2, 3)
    ]);
    console.log(`   –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω: ${triangle.points.length} —Ç–æ—á–µ–∫`);

    const square = new Polygon([
        new Point(1, 1),
        new Point(5, 1),
        new Point(5, 5),
        new Point(1, 5)
    ]);

    console.log(`   –ö–≤–∞–¥—Ä–∞—Ç —Å–æ–∑–¥–∞–Ω: ${square.points.length} —Ç–æ—á–µ–∫\n`);

    // 2. –¢—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—è
    console.log('üî∫ 2. –¢—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—è');
    console.log(`   –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫: ${triangle.tpolygons.length} —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤`);
    console.log(`   –ö–≤–∞–¥—Ä–∞—Ç: ${square.tpolygons.length} —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤\n`);

    const nonConvexPolygon = new Polygon([
        new Point(3, 2),
        new Point(4, -1),
        new Point(8, 3),
        new Point(8, -2),
        new Point(10, 2),
        new Point(13, 3),
        new Point(12, 7),
        new Point(7, 10),
        new Point(2, 7),
        new Point(4, 5),
    ]);

    const holePolygon = new Polygon([
        new Point(5, 5),
        new Point(7, 5),
        new Point(8, 7),
        new Point(10, 3),
    ]);

    const nonConvexPolygonWithHole = nonConvexPolygon.differencePolygon(holePolygon);
    var tPoligons = nonConvexPolygonWithHole.polygons[0].tpolygons;
    console.log(`   –ü–æ–ª–∏–≥–æ–Ω —Å –¥—ã—Ä–æ–π: ${tPoligons.length} —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤`);

    function printPolygonMap(pmap, label) {
        console.log(`\n${label}:`);

        pmap.polygons.forEach((poly, idx) => {
            console.log(` Polygon #${idx}:`, poly.points.map(p => `(${p.x},${p.y})`).join(' '));
            poly.tpolygons.forEach((tp, i) => {
                console.log(`   TPolygon #${i}:`, tp.mainTriangle.map(p => `(${p.x},${p.y})`).join(' - '));
                console.log(`     –¶–µ–Ω—Ç—Ä: (${tp.centerPoint.x}, ${tp.centerPoint.y})`);
                const conn = tp.connections.map(c => {
                    const tIdx = poly.tpolygons.indexOf(c.neighbor);
                    return `#${tIdx} (dist=${c.distance.toFixed(2)})`;
                });
                console.log(`     –°–≤—è–∑–∏:`, conn.join(', '));
            });
        });
    }
    printPolygonMap(nonConvexPolygonWithHole, '–ü–æ–ª–∏–≥–æ–Ω —Å –¥—ã—Ä–æ–π');

    // 3. –ë—É–ª–µ–≤—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
    console.log('üîÑ 3. –ë—É–ª–µ–≤—ã –æ–ø–µ—Ä–∞—Ü–∏–∏');
    try {
        const union = triangle.unionPolygon(square);
        console.log(`   –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ: ${union.polygons.length} –ø–æ–ª–∏–≥–æ–Ω–æ–≤`);

        const difference = square.differencePolygon(triangle);
        console.log(`   –†–∞–∑–Ω–æ—Å—Ç—å: ${difference.polygons.length} –ø–æ–ª–∏–≥–æ–Ω–æ–≤\n`);
    } catch (err) {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ –≤ –±—É–ª–µ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö:', err.message);
    }

    // 4. –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    console.log('üéØ 4. –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏');
    const testPoint = new Point(2, 2);
    const testPolygon = [
        new Point(0, 0),
        new Point(4, 0),
        new Point(4, 4),
        new Point(0, 4)
    ];

    const isInside = pointInPolygon(testPoint, testPolygon);
    console.log(`   –¢–æ—á–∫–∞ (2,2) –≤–Ω—É—Ç—Ä–∏ –∫–≤–∞–¥—Ä–∞—Ç–∞: ${isInside}`);

    const intersect = segmentsIntersect(
        new Point(0, 0), new Point(4, 4),
        new Point(0, 4), new Point(4, 0)
    );
    console.log(`   –û—Ç—Ä–µ–∑–∫–∏ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è: ${intersect}\n`);

    console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

} catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.error(error.stack);
} 